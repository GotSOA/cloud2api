<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:data-mapper="http://www.mulesoft.org/schema/mule/ee/data-mapper" xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting" xmlns:json="http://www.mulesoft.org/schema/mule/json"
	xmlns:vm="http://www.mulesoft.org/schema/mule/vm"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:context="http://www.springframework.org/schema/context" xmlns:apikit="http://www.mulesoft.org/schema/mule/apikit" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:spring="http://www.springframework.org/schema/beans" xmlns:core="http://www.mulesoft.org/schema/mule/core" version="EE-3.5.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/current/mule-vm.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
http://www.mulesoft.org/schema/mule/apikit http://www.mulesoft.org/schema/mule/apikit/current/mule-apikit.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
http://www.mulesoft.org/schema/mule/ee/data-mapper http://www.mulesoft.org/schema/mule/ee/data-mapper/current/mule-data-mapper.xsd">

    <context:property-placeholder location="api.properties"/>
    <!-- <context:property-placeholder location="api.properties, publicApi.properties, ${mule-env}-publicApi.properties"/> -->
    
    <apikit:config name="apiConfig" raml="api.raml" consoleEnabled="true" consolePath="console" doc:name="Router"/>
    <apikit:mapping-exception-strategy name="apiKitGlobalExceptionMapping" doc:name="Mapping Exception Strategy">  
        <apikit:mapping statusCode="404"> 
            <apikit:exception value="org.mule.module.apikit.exception.NotFoundException"/>  
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property"></set-property>  
            <set-payload value="{ &quot;message&quot;: &quot;Resource not found&quot; }" doc:name="Set Payload"></set-payload> 
        </apikit:mapping>  
        <apikit:mapping statusCode="405"> 
            <apikit:exception value="org.mule.module.apikit.exception.MethodNotAllowedException"/>  
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property"></set-property>  
            <set-payload value="{ &quot;message&quot;: &quot;Method not allowed&quot; }" doc:name="Set Payload"></set-payload> 
        </apikit:mapping>  
        <apikit:mapping statusCode="415"> 
            <apikit:exception value="org.mule.module.apikit.exception.UnsupportedMediaTypeException"/>  
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property"></set-property>  
            <set-payload value="{ &quot;message&quot;: &quot;Unsupported media type&quot; }" doc:name="Set Payload"></set-payload> 
        </apikit:mapping>  
        <apikit:mapping statusCode="406"> 
            <apikit:exception value="org.mule.module.apikit.exception.NotAcceptableException"/>  
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property"></set-property>  
            <set-payload value="{ &quot;message&quot;: &quot;Not acceptable&quot; }" doc:name="Set Payload"></set-payload> 
        </apikit:mapping>  
        <apikit:mapping statusCode="400"> 
            <apikit:exception value="org.mule.module.apikit.exception.BadRequestException"/>  
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property"></set-property>  
            <set-payload value="{ &quot;message&quot;: &quot;Bad request&quot; }" doc:name="Set Payload"></set-payload> 
        </apikit:mapping> 
    </apikit:mapping-exception-strategy>
    <data-mapper:config name="addCloudService_to_Customer" transformationGraphPath="addcloudservice-to-customer.grf" doc:name="addCloudService_to_Customer"/>
    <flow name="main" doc:name="main">
        <http:inbound-endpoint address="http://0.0.0.0:${http.port}/api" doc:name="HTTP"/>
        <apikit:router config-ref="apiConfig" doc:name="APIkit Router"/>
        <exception-strategy ref="apiKitGlobalExceptionMapping" doc:name="Reference Exception Strategy"/>
    </flow>
    
    <!--  createCustomerAccount POST -->    
    <flow name="post:/createCustomerAccount:apiConfig" doc:name="post:/createCustomerAccount:apiConfig">
    	<logger message="In createCustomerAccount (POST) ..." level="INFO" doc:name="Logger"/>
    </flow>
    
    <!-- retrieveCustomerAccounts -->
    <flow name="get:/retrieveCustomerAccounts:apiConfig" doc:name="get:/retrieveCustomerAccounts:apiConfig">
    	<logger message="In retrieveCustomerAccounts (GET) ..." level="INFO" doc:name="Logger"/>
    </flow>
    
    <!--  retrieveCustomer by email and company name -->    
    <flow name="get:/retrieveCustomer:apiConfig" doc:name="get:/retrieveCustomer:apiConfig">
    	<logger message="In retrieveCustomer by email and companyName (GET) ..." level="INFO" doc:name="Logger"/>
        <json:object-to-json-transformer doc:name="Object to JSON"/>
        <!-- convert inbound props into flowVars or invocation properties -->
        <set-variable variableName="email" value="#[message.inboundProperties['http.query.params']['email']]" doc:name="set Variable email"/>
        <set-variable variableName="companyName" value="#[message.inboundProperties['http.query.params']['companyName']]" doc:name="set Variable companyName"/>
        <set-payload value="#[Thread.currentThread().getContextClassLoader().getResourceAsStream('examples/publicApi/service-post-example.json')]" doc:name="Set Payload"/>
       	<object-to-string-transformer doc:name="Object to String"/>
        <vm:outbound-endpoint exchange-pattern="request-response" doc:name="VM-processRequest" path="Q.processRequest" />
        <!-- <exception-strategy ref="global-main-exception-strategy" doc:name="Reference Exception Strategy" /> -->
    </flow>
    
    <!--  retrieveCustomer by id -->    
    <flow name="get:/retrieveCustomer/{customerId}:apiConfig" doc:name="get:/retrieveCustomer/{customerId}:apiConfig">
    	<logger message="In retrieveCustomer by Id (GET) ..." level="INFO" doc:name="Logger"/>
    </flow> 
    
    <!--  retrieveAccountContacts -->
    <flow name="get:/retrieveAccountContacts:apiConfig" doc:name="get:/retrieveAccountContacts:apiConfig">
    	<logger message="In retrieveAccountContacts (GET) ..." level="INFO" doc:name="Logger"/>
    </flow> 
    
    <!--  retrieveAccountContact by id -->
    <flow name="get:/retrieveAccountContacts/{contactId}:apiConfig" doc:name="get:/retrieveAccountContacts/{contactId}:apiConfig">
    	<logger message="In retrieveAccountContact by Id (GET) ..." level="INFO" doc:name="Logger"/>
    </flow> 
    
    <!--  updateAccountContact -->
    <flow name="put:/retrieveAccountContacts/{contactId}:apiConfig" doc:name="put:/retrieveAccountContacts/{contactId}:apiConfig">
    	<logger message="In updateAccountContact (PUT) ..." level="INFO" doc:name="Logger"/>
    </flow> 
    
    
    <!-- addCloudService -->
    <flow name="post:/addCloudService:apiConfig" doc:name="post:/addCloudService:apiConfig">
    	<logger message="In addCloudService 1 (POST) ... " level="INFO" doc:name="Logger"/>
    	<logger message="payload type: #[payload.getClass()]" level="INFO" doc:name="Logger"/>
        <json:object-to-json-transformer doc:name="Object to JSON"/>
        <logger level="INFO" message="payload: #[payload]" doc:name="Logger"/>
		<set-variable variableName="customerId" value="#[json:id]" doc:name="set Variable customer-id"/>
        <set-variable variableName="serviceId" value="#[json:serviceName]" doc:name="set Variable service-id"/>
        <set-variable variableName="billingSpecifics" value="#[json:billingSpecifics]" doc:name="set Variable billing-specifics"/>  
        <logger message="verify variables: customer-id: #[flowVars['customerId']]" level="INFO" doc:name="Logger"/> 
        <logger message="verify variables: service-id #[flowVars['serviceId']]" level="INFO" doc:name="Logger"/>
        <logger message="verify variables: billing-specifics: #[flowVars['billingSpecifics']]" level="INFO" doc:name="Logger"/>
        <data-mapper:transform config-ref="addCloudService_to_Customer" doc:name="addCloudService-to-Customer"/>
    	<logger message="verify new payload type: #[payload.getClass()]" level="INFO" doc:name="Verify new payload type"/>
    	<logger message="Sgid: #[payload.sgid]" level="INFO" doc:name="get Sgid"/>
    	<logger message="CompanyName: #[payload.companyName]" level="INFO" doc:name="get CompanyName"/>
        <!-- map json to canonical w dataMapper -->
        <!-- display info in canonical form -->
        <!-- map the other way: canonical to aria -->
        <!-- persist data to Aria -->
        <!-- map back to canonical -->
        <!-- map out of canonical back to json and return payload to requester -->
        <!-- set mock payload from Aria -->
        <set-payload value="#[Thread.currentThread().getContextClassLoader().getResourceAsStream('examples/publicApi/post-ACK-example.json')]" doc:name="Set Payload"/>
       	<object-to-string-transformer doc:name="Object to String"/>
        <vm:outbound-endpoint exchange-pattern="request-response" path="Q.processRequest" doc:name="VM-processRequest"/>
        <!-- <exception-strategy ref="global-main-exception-strategy" doc:name="Reference Exception Strategy" /> -->
    </flow> 
    
    <!--  retrieveCloudServices -->
    <flow name="get:/retrieveCloudServices:apiConfig" doc:name="get:/retrieveCloudServices:apiConfig">
    	<logger message="In retrieveCloudServices (GET) ..." level="INFO" doc:name="Logger"/>
    </flow> 
     
    <!--  retrieveCloudService by Id -->
    <flow name="get:/retrieveCloudServices/{cloudServiceId}:apiConfig" doc:name="get:/retrieveCloudServices/{cloudServiceId}:apiConfig">
    	<logger message="In retrieveCloudService by Id (GET) ..." level="INFO" doc:name="Logger"/>
    </flow> 
    
    <!-- updateCloudService -->
    <flow name="put:/retrieveCloudServices/{cloudServiceId}:apiConfig" doc:name="put:/retrieveCloudServices/{cloudServiceId}:apiConfig">
    	<logger message="In updateCloudService (PUT) ..." level="INFO" doc:name="Logger"/>
    </flow> 
    
    <!-- removeCloudService -->
    <flow name="delete:/retrieveCloudServices/{cloudServiceId}:apiConfig" doc:name="delete:/retrieveCloudServices/{cloudServiceId}:apiConfig">
    	<logger message="In removeCloudService (DELETE) ..." level="INFO" doc:name="Logger"/>
    </flow>  
    
    <!-- createWorkplace -->
    <flow name="post:/createWorkplace:apiConfig" doc:name="post:/createWorkplace:apiConfig">
    	<logger message="In createWorkplace (POST) ..." level="INFO" doc:name="Logger"/>
    </flow> 
    
    <!-- retrieveWorkplaces -->
    <flow name="get:/retrieveWorkplaces:apiConfig" doc:name="get:/retrieveWorkplaces:apiConfig">
    	<logger message="In retrieveWorkplaces (GET) ..." level="INFO" doc:name="Logger"/>
    </flow>  
    
    <!--  retrieveWorkplace by Id -->
    <flow name="get:/retrieveWorkplaces/{workplaceId}:apiConfig" doc:name="get:/retrieveWorkplaces/{workplaceId}:apiConfig">
    	<logger message="In retrieveWorkplace by Id (GET) ..." level="INFO" doc:name="Logger"/>
    </flow> 
       
    <!-- updateWorkplace -->   
    <flow name="put:/updateWorkplace/{workplaceId}:apiConfig" doc:name="put:/updateWorkplace/{workplaceId}:apiConfig">
    	<logger message="In updateWorkplace (PUT) ..." level="INFO" doc:name="Logger"/>
    </flow> 
    
    <!-- removeWorkplace -->
    <flow name="delete:/updateWorkplace/{workplaceId}:apiConfig" doc:name="delete:/updateWorkplace/{workplaceId}:apiConfig">
    	<logger message="In removeWorkplace (DELETE) ..." level="INFO" doc:name="Logger"/>
    </flow> 
     
    <!-- retrieveOfferingPrices -->
    <flow name="get:/retrieveOfferingPrices:apiConfig" doc:name="get:/retrieveOfferingPrices:apiConfig">
    	<logger message="In retrieveOfferingPrices (GET) ..." level="INFO" doc:name="Logger"/>
    </flow>  
    
    <!--  retrieveOfferingPrice by Id -->
    <flow name="get:/retrieveOfferingPrices/{offeringPriceId}:apiConfig" doc:name="get:/retrieveOfferingPrices/{offeringPriceId}:apiConfig">
    	<logger message="In retrieveOfferingPrice by Id (GET) ..." level="INFO" doc:name="Logger"/>
    </flow> 
    
    <!-- retrieveTemplatePrices -->
    <flow name="get:/retrieveTemplatePrices:apiConfig" doc:name="get:/retrieveTemplatePrices:apiConfig">
    	<logger message="In retrieveTemplatePrices (GET) ..." level="INFO" doc:name="Logger"/>
    </flow>  
    
    <!--  retrieveTemplatePrice by Id -->
    <flow name="get:/retrieveTemplatePrices/{templatePriceId}:apiConfig" doc:name="get:/retrieveTemplatePrices/{templatePriceId}:apiConfig">
    	<logger message="In retrieveTemplatePrice by Id (GET) ..." level="INFO" doc:name="Logger"/>
    </flow> 
    
    <!-- retrieveInvoices -->
    <flow name="get:/retrieveInvoices:apiConfig" doc:name="get:/retrieveInvoices:apiConfig">
    	<logger message="In retrieveInvoices (GET) ..." level="INFO" doc:name="Logger"/>
    </flow>  
    
    <!--  retrieveInvoice by Id -->
    <flow name="get:/retrieveInvoices/{invoiceId}:apiConfig" doc:name="get:/retrieveInvoices/{invoiceId}:apiConfig">
    	<logger message="In retrieveInvoice by Id (GET) ..." level="INFO" doc:name="Logger"/>
    </flow> 
    
    <!-- retrieveInvoiceDetails --> 
    <flow name="get:/retrieveInvoiceDetails:apiConfig" doc:name="get:/retrieveInvoiceDetails:apiConfig">
    	<logger message="In retrieveInvoiceDetails (GET) ..." level="INFO" doc:name="Logger"/>
    </flow>
    
    <!-- bogus request processing flow -->
    <flow name="request-processing-flow" doc:name="request-processing-flow">
        <vm:inbound-endpoint exchange-pattern="request-response" doc:name="VM-processRequest" path="Q.processRequest" />
		<logger level="INFO" message="received request: #[payload]" doc:name="Logger"/>
        <echo-component doc:name="Echo"/>
    </flow>         
</mule>
